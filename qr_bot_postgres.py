#!/usr/bin/env python3
"""
NSP QR Generator Bot - PostgreSQL –≤–µ—Ä—Å–∏—è
"""

import asyncio
import qrcode
import logging
import uuid
from io import BytesIO
from datetime import datetime
from typing import Optional, Dict, Any

from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile

from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession

from config import BOT_TOKEN, AUTHORIZED_USERS, DATABASE_URL
from models import Base, QRCode, AppUser, AppQRScan, PointTransaction

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('nsp_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class QRStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤"""
    waiting_for_product_name = State()
    waiting_for_category = State()
    waiting_for_points = State()
    waiting_for_description = State()

class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.engine = create_async_engine(DATABASE_URL, echo=True)
        self.AsyncSessionLocal = async_sessionmaker(self.engine, class_=AsyncSession, expire_on_commit=False)
    
    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise
    
    async def add_qr_code(self, qr_data: Dict[str, Any]) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.AsyncSessionLocal() as db:
                new_qr = QRCode(
                    qr_id=qr_data['qr_id'],
                    product_name=qr_data['product_name'],
                    category=qr_data['category'],
                    points=qr_data['points'],
                    description=qr_data['description'],
                    created_by=await self.get_or_create_user(db, qr_data['created_by'])
                )
                db.add(new_qr)
                await db.commit()
                logger.info(f"QR-–∫–æ–¥ {qr_data['qr_id']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è QR-–∫–æ–¥–∞: {e}")
            return False
    
    async def get_or_create_user(self, db: AsyncSession, telegram_id: int) -> uuid.UUID:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = await db.execute(
            select(AppUser).where(AppUser.telegram_id == telegram_id)
        )
        user = user.scalar_one_or_none()
        
        if not user:
            user = AppUser(
                user_id=str(uuid.uuid4()),
                name=f"Telegram User {telegram_id}",
                email=f"telegram_{telegram_id}@nsp.local",
                password_hash="telegram_user",
                telegram_id=telegram_id
            )
            db.add(user)
            await db.flush()
        
        return user.id
    
    async def get_qr_info(self, qr_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ QR-–∫–æ–¥–µ"""
        try:
            async with self.AsyncSessionLocal() as db:
                qr_code = await db.execute(
                    select(QRCode).where(QRCode.qr_id == qr_id)
                )
                qr_code = qr_code.scalar_one_or_none()
                
                if qr_code:
                    return {
                        'id': qr_code.id,
                        'qr_id': qr_code.qr_id,
                        'product_name': qr_code.product_name,
                        'category': qr_code.category,
                        'points': qr_code.points,
                        'description': qr_code.description,
                        'created_at': qr_code.created_at,
                        'scanned_count': qr_code.scanned_count,
                        'is_used': qr_code.is_used
                    }
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è QR-–∫–æ–¥–∞: {e}")
            return None
    
    async def get_admin_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            async with self.AsyncSessionLocal() as db:
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_qrs = await db.execute(select(func.count(QRCode.id)))
                total_qrs = total_qrs.scalar() or 0
                
                total_scans = await db.execute(select(func.count(AppQRScan.id)))
                total_scans = total_scans.scalar() or 0
                
                unique_users = await db.execute(select(func.count(func.distinct(AppQRScan.user_id))))
                unique_users = unique_users.scalar() or 0
                
                # –¢–æ–ø QR-–∫–æ–¥—ã
                top_qrs = await db.execute(
                    select(QRCode)
                    .order_by(QRCode.scanned_count.desc())
                    .limit(5)
                )
                top_qrs = top_qrs.scalars().all()
                
                return {
                    'total_qrs': total_qrs,
                    'total_scans': total_scans,
                    'unique_users': unique_users,
                    'top_qrs': [
                        {
                            'product_name': qr.product_name,
                            'scanned_count': qr.scanned_count,
                            'points': qr.points
                        }
                        for qr in top_qrs
                    ]
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

class QRGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤"""
    
    @staticmethod
    def generate_qr_code(data: str, size: int = 10) -> BytesIO:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞"""
        try:
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_M,
                box_size=size,
                border=4,
            )
            qr.add_data(data)
            qr.make(fit=True)
            
            img = qr.make_image(fill_color="black", back_color="white")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
            bio = BytesIO()
            img.save(bio, 'PNG')
            bio.seek(0)
            return bio
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {e}")
            raise

class NSPBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        self.router = Router()
        self.db = Database()
        self.qr_generator = QRGenerator()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handlers
        self._register_handlers()
        self.dp.include_router(self.router)
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message(Command("start"))(self.start_command)
        self.router.message(Command("help"))(self.help_command)
        self.router.message(Command("admin"))(self.admin_command)
        self.router.message(Command("generate"))(self.generate_command)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR
        self.router.message(StateFilter(QRStates.waiting_for_product_name))(self.process_product_name)
        self.router.message(StateFilter(QRStates.waiting_for_category))(self.process_category)
        self.router.message(StateFilter(QRStates.waiting_for_points))(self.process_points)
        self.router.message(StateFilter(QRStates.waiting_for_description))(self.process_description)
        
        # Callback queries
        self.router.callback_query()(self.handle_callback)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–æ–≤ (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        self.router.message()(self.handle_qr_scan)
    
    async def start_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üöó **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NSP QR Generator Bot!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ üì± –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π
‚Ä¢ üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/generate - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π QR-–∫–æ–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
/admin - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
/help - –°–ø—Ä–∞–≤–∫–∞

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ!
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ])
        
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")
    
    async def help_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**
‚Ä¢ `/generate` - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π QR-–∫–æ–¥
‚Ä¢ `/admin` - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π

**–§–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞:**
`NSP:PRODUCT_ID:CATEGORY:POINTS`

–ü—Ä–∏–º–µ—Ä: `NSP:BRAKE_PADS_001:BRAKES:50`
        """
        
        await message.answer(help_text, parse_mode="Markdown")
    
    async def admin_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        if message.from_user.id not in AUTHORIZED_USERS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        admin_stats = await self.db.get_admin_stats()
        
        admin_text = f"""
üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å**

üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ QR-–∫–æ–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: **{admin_stats.get('total_qrs', 0)}**
‚Ä¢ –í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: **{admin_stats.get('total_scans', 0)}**
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{admin_stats.get('unique_users', 0)}**

"""
        
        if admin_stats.get('top_qrs'):
            admin_text += "üèÜ **–¢–æ–ø QR-–∫–æ–¥—ã:**\n"
            for qr in admin_stats['top_qrs'][:3]:
                admin_text += f"‚Ä¢ {qr['product_name']} - {qr['scanned_count']} —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π ({qr['points']} –±–∞–ª–ª–æ–≤)\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å QR", callback_data="create_qr"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_admin")
            ]
        ])
        
        await message.answer(admin_text, reply_markup=keyboard, parse_mode="Markdown")
    
    async def generate_command(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞"""
        if message.from_user.id not in AUTHORIZED_USERS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤")
            return
        
        await message.answer(
            "üè∑Ô∏è **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ QR-–∫–æ–¥–∞**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞/–∑–∞–ø—á–∞—Å—Ç–∏:",
            parse_mode="Markdown"
        )
        await state.set_state(QRStates.waiting_for_product_name)
    
    async def process_product_name(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        await state.update_data(product_name=message.text)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîß –î–≤–∏–≥–∞—Ç–µ–ª—å", callback_data="cat_engine"),
                InlineKeyboardButton(text="üõû –¢–æ—Ä–º–æ–∑–∞", callback_data="cat_brakes")
            ],
            [
                InlineKeyboardButton(text="‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞", callback_data="cat_electrical"),
                InlineKeyboardButton(text="üî© –ü–æ–¥–≤–µ—Å–∫–∞", callback_data="cat_suspension")
            ],
            [
                InlineKeyboardButton(text="üõ¢Ô∏è –ú–∞—Å–ª–∞", callback_data="cat_oils"),
                InlineKeyboardButton(text="üß∞ –ü—Ä–æ—á–µ–µ", callback_data="cat_other")
            ]
        ])
        
        await message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:",
            reply_markup=keyboard
        )
        await state.set_state(QRStates.waiting_for_category)
    
    async def process_category(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º)"""
        await state.update_data(category=message.text)
        await message.answer("üíé –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000):")
        await state.set_state(QRStates.waiting_for_points)
    
    async def process_points(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤"""
        try:
            points = int(message.text)
            if not 1 <= points <= 1000:
                await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000")
                return
            
            await state.update_data(points=points)
            await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
            await state.set_state(QRStates.waiting_for_description)
            
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    async def process_description(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞"""
        description = message.text if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else ""
        
        data = await state.get_data()
        data['description'] = description
        data['created_by'] = message.from_user.id
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
        qr_id = f"NSP_{uuid.uuid4().hex[:8].upper()}"
        data['qr_id'] = qr_id
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if await self.db.add_qr_code(data):
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è QR-–∫–æ–¥–∞
            qr_data = f"NSP:{qr_id}:{data['category']}:{data['points']}"
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
            qr_image = self.qr_generator.generate_qr_code(qr_data)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º QR-–∫–æ–¥–µ
            info_text = f"""
‚úÖ **QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**

üÜî ID: `{qr_id}`
üè∑Ô∏è –ü—Ä–æ–¥—É–∫—Ç: **{data['product_name']}**
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{data['category']}**
üíé –ë–∞–ª–ª—ã: **{data['points']}**
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

üì± **–î–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞:** `{qr_data}`
            """
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ QR-–∫–æ–¥–∞
            qr_file = BufferedInputFile(qr_image.read(), filename=f"qr_{qr_id}.png")
            await message.answer_photo(
                photo=qr_file,
                caption=info_text,
                parse_mode="Markdown"
            )
            
            logger.info(f"QR-–∫–æ–¥ {qr_id} —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        await state.clear()
    
    async def handle_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        data = callback.data
        
        try:
            if data == "help":
                await self.help_command(callback.message)
            
            elif data == "refresh_admin":
                await self.admin_command(callback.message)
            
            elif data == "create_qr":
                if callback.from_user.id in AUTHORIZED_USERS:
                    await self.generate_command(callback.message, state)
                else:
                    await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            
            elif data.startswith("cat_"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                categories = {
                    "cat_engine": "–î–≤–∏–≥–∞—Ç–µ–ª—å",
                    "cat_brakes": "–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
                    "cat_electrical": "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞",
                    "cat_suspension": "–ü–æ–¥–≤–µ—Å–∫–∞",
                    "cat_oils": "–ú–∞—Å–ª–∞ –∏ –∂–∏–¥–∫–æ—Å—Ç–∏",
                    "cat_other": "–ü—Ä–æ—á–µ–µ"
                }
                
                category = categories.get(data, "–ü—Ä–æ—á–µ–µ")
                await state.update_data(category=category)
                
                await callback.message.edit_text(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: **{category}**\n\n"
                    "üíé –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000):",
                    parse_mode="Markdown"
                )
                await state.set_state(QRStates.waiting_for_points)
            
            await callback.answer()
            
        except Exception as e:
            logger.warning(f"Callback error: {e}")
            await callback.answer()
    
    async def handle_qr_scan(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤"""
        text = message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ NSP QR-–∫–æ–¥–∞
        if not text.startswith("NSP:"):
            await message.answer(
                "‚ùì –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ QR-–∫–æ–¥ NSP.\n\n"
                "–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: `NSP:ID:CATEGORY:POINTS`\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
                parse_mode="Markdown"
            )
            return
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ QR-–∫–æ–¥–∞
            parts = text.split(":")
            if len(parts) < 4:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞")
                return
            
            qr_id = parts[1]
            
            # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            qr_info = await self.db.get_qr_info(qr_id)
            
            if not qr_info:
                await message.answer(
                    f"‚ùå QR-–∫–æ–¥ `{qr_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                    parse_mode="Markdown"
                )
                return
            
            if qr_info['is_used']:
                await message.answer("‚ùå –≠—Ç–æ—Ç QR-–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
                return
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            scan_text = f"""
‚úÖ **QR-–∫–æ–¥ –Ω–∞–π–¥–µ–Ω!**

üè∑Ô∏è **–ü—Ä–æ–¥—É–∫—Ç:** {qr_info['product_name']}
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {qr_info['category']}
üíé **–ë–∞–ª–ª—ã:** {qr_info['points']}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {qr_info['description'] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ QR-–∫–æ–¥–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {qr_info['scanned_count']}
‚Ä¢ –°–æ–∑–¥–∞–Ω: {qr_info['created_at'].strftime("%d.%m.%Y") if qr_info['created_at'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}

‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ NSP
            """
            
            await message.answer(scan_text, parse_mode="Markdown")
            
            logger.info(f"QR-–∫–æ–¥ {qr_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR-–∫–æ–¥–∞: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ NSP QR Generator Bot...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self.db.init_db()
            
            # –£–¥–∞–ª–µ–Ω–∏–µ webhook –µ—Å–ª–∏ –µ—Å—Ç—å
            await self.bot.delete_webhook(drop_pending_updates=True)
            
            # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
            await self.dp.start_polling(
                self.bot,
                skip_updates=True,
                handle_signals=False
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
        finally:
            await self.bot.session.close()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot = NSPBot()
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        await bot.start_bot()
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")

if __name__ == "__main__":
    asyncio.run(main())