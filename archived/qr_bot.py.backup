import asyncio
import logging
import json
import qrcode
import io
import base64
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import uuid

import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7712440966:AAH3DnVoTl72XmOHryYbDzLx_1185H7U9BU"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
DATABASE_URL = "postgresql://nsp_user:nsp_password@localhost/nsp_qr_db"

# –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (ID Telegram)
AUTHORIZED_USERS = [
    97915547,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∫–ª–∞–¥–æ–≤—â–∏–∫–æ–≤
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('qr_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class QRStates(StatesGroup):
    waiting_for_product_name = State()
    waiting_for_category = State()
    waiting_for_points = State()
    waiting_for_description = State()
    waiting_for_manufacturer = State()
    confirm_creation = State()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
PRODUCT_CATEGORIES = {
    "brake_system": "–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
    "engine_parts": "–î–µ—Ç–∞–ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è",
    "suspension": "–ü–æ–¥–≤–µ—Å–∫–∞",
    "electrical": "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞",
    "body_parts": "–ö—É–∑–æ–≤–Ω—ã–µ –¥–µ—Ç–∞–ª–∏",
    "filters": "–§–∏–ª—å—Ç—Ä—ã",
    "oils_fluids": "–ú–∞—Å–ª–∞ –∏ –∂–∏–¥–∫–æ—Å—Ç–∏",
    "tire_wheel": "–®–∏–Ω—ã –∏ –¥–∏—Å–∫–∏",
    "interior": "–°–∞–ª–æ–Ω",
    "exterior": "–≠–∫—Å—Ç–µ—Ä—å–µ—Ä"
}

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db_pool = None

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global db_pool
    try:
        db_pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        async with db_pool.acquire() as conn:
            # –¢–∞–±–ª–∏—Ü–∞ QR-–∫–æ–¥–æ–≤
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS qr_codes (
                    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                    qr_code VARCHAR(255) UNIQUE NOT NULL,
                    product_name VARCHAR(255) NOT NULL,
                    product_category VARCHAR(100) NOT NULL,
                    points_earned INTEGER NOT NULL DEFAULT 50,
                    description TEXT,
                    manufacturer VARCHAR(255),
                    created_by_user_id BIGINT NOT NULL,
                    created_by_username VARCHAR(255),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    is_active BOOLEAN DEFAULT TRUE,
                    scan_count INTEGER DEFAULT 0,
                    last_scanned_at TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS qr_scans (
                    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                    qr_code VARCHAR(255) NOT NULL,
                    user_id VARCHAR(255),
                    points_earned INTEGER NOT NULL,
                    product_name VARCHAR(255) NOT NULL,
                    product_category VARCHAR(100) NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    location VARCHAR(255)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS qr_statistics (
                    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                    date DATE DEFAULT CURRENT_DATE,
                    total_qr_generated INTEGER DEFAULT 0,
                    total_scans INTEGER DEFAULT 0,
                    total_points_issued INTEGER DEFAULT 0,
                    created_by_user_id BIGINT,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            await conn.execute('CREATE INDEX IF NOT EXISTS idx_qr_codes_code ON qr_codes(qr_code)')
            await conn.execute('CREATE INDEX IF NOT EXISTS idx_qr_scans_code ON qr_scans(qr_code)')
            await conn.execute('CREATE INDEX IF NOT EXISTS idx_qr_codes_created_by ON qr_codes(created_by_user_id)')
            
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def check_auth(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    async def wrapper(message: Message, *args, **kwargs):
        if message.from_user.id not in AUTHORIZED_USERS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        return await func(message, *args, **kwargs)
    return wrapper

def generate_qr_code(data: str) -> io.BytesIO:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞"""
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(data)
    qr.make(fit=True)
    
    img = qr.make_image(fill_color="black", back_color="white")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
    img_buffer = io.BytesIO()
    img.save(img_buffer, format='PNG')
    img_buffer.seek(0)
    
    return img_buffer

async def save_qr_to_database(qr_data: Dict, user_id: int, username: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with db_pool.acquire() as conn:
            qr_code = str(uuid.uuid4())
            
            await conn.execute('''
                INSERT INTO qr_codes 
                (qr_code, product_name, product_category, points_earned, description, 
                 manufacturer, created_by_user_id, created_by_username)
                VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
            ''', qr_code, qr_data['product_name'], qr_data['category'], 
                qr_data['points'], qr_data.get('description'), 
                qr_data.get('manufacturer'), user_id, username)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await update_statistics(conn, user_id, qr_generated=1)
            
            return qr_code
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è QR-–∫–æ–¥–∞: {e}")
        raise

async def update_statistics(conn, user_id: int, qr_generated: int = 0, scans: int = 0, points: int = 0):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        today = datetime.now().date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        existing = await conn.fetchrow(
            'SELECT * FROM qr_statistics WHERE date = $1 AND created_by_user_id = $2',
            today, user_id
        )
        
        if existing:
            await conn.execute('''
                UPDATE qr_statistics 
                SET total_qr_generated = total_qr_generated + $1,
                    total_scans = total_scans + $2,
                    total_points_issued = total_points_issued + $3,
                    updated_at = CURRENT_TIMESTAMP
                WHERE date = $4 AND created_by_user_id = $5
            ''', qr_generated, scans, points, today, user_id)
        else:
            await conn.execute('''
                INSERT INTO qr_statistics 
                (date, total_qr_generated, total_scans, total_points_issued, created_by_user_id)
                VALUES ($1, $2, $3, $4, $5)
            ''', today, qr_generated, scans, points, user_id)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üîç –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥", callback_data="create_qr"),
        InlineKeyboardButton(text="üìä –ú–æ–∏ QR-–∫–æ–¥—ã", callback_data="my_qr_codes")
    )
    builder.row(
        InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics"),
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ QR", callback_data="search_qr")
    )
    builder.row(
        InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    )
    return builder.as_markup()

def get_categories_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    builder = InlineKeyboardBuilder()
    
    for key, value in PRODUCT_CATEGORIES.items():
        builder.row(InlineKeyboardButton(text=value, callback_data=f"category_{key}"))
    
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return builder.as_markup()

def get_points_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –±–∞–ª–ª–æ–≤"""
    builder = InlineKeyboardBuilder()
    points_options = [25, 50, 75, 100, 150, 200]
    
    for i in range(0, len(points_options), 3):
        row_buttons = []
        for j in range(i, min(i + 3, len(points_options))):
            points = points_options[j]
            row_buttons.append(InlineKeyboardButton(
                text=f"{points} –±–∞–ª–ª–æ–≤", 
                callback_data=f"points_{points}"
            ))
        builder.row(*row_buttons)
    
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –î—Ä—É–≥–æ–µ", callback_data="points_custom"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_category")
    )
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
@check_auth
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NSP QR Generator Bot! üöó\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å QR-–∫–æ–¥—ã –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("help"))
@check_auth
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É NSP QR Generator**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /stats - –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

**–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥:**
1. –ù–∞–∂–º–∏—Ç–µ "üîç –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥"
2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
4. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
5. –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
6. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
7. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ

**–§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ üìä –ú–æ–∏ QR-–∫–æ–¥—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—à–∏–º QR-–∫–æ–¥–∞–º
‚Ä¢ üîç –ü–æ–∏—Å–∫ QR - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–æ–¥—É

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @your_support_username
    """
    await message.answer(help_text, parse_mode="Markdown")

@dp.message(Command("stats"))
@check_auth
async def quick_stats_command(message: Message):
    """–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        async with db_pool.acquire() as conn:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stats = await conn.fetchrow('''
                SELECT 
                    COUNT(*) as total_qr,
                    SUM(scan_count) as total_scans,
                    SUM(points_earned * scan_count) as total_points
                FROM qr_codes 
                WHERE created_by_user_id = $1 AND is_active = TRUE
            ''', message.from_user.id)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today_stats = await conn.fetchrow('''
                SELECT 
                    COALESCE(SUM(total_qr_generated), 0) as today_qr,
                    COALESCE(SUM(total_scans), 0) as today_scans
                FROM qr_statistics 
                WHERE created_by_user_id = $1 AND date = CURRENT_DATE
            ''', message.from_user.id)
            
            stats_text = f"""
üìà **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

**–í—Å–µ–≥–æ:**
‚Ä¢ QR-–∫–æ–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {stats['total_qr'] or 0}
‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {stats['total_scans'] or 0}
‚Ä¢ –ë–∞–ª–ª–æ–≤ –≤—ã–¥–∞–Ω–æ: {stats['total_points'] or 0}

**–°–µ–≥–æ–¥–Ω—è:**
‚Ä¢ QR-–∫–æ–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {today_stats['today_qr'] or 0}
‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {today_stats['today_scans'] or 0}
            """
            
            await message.answer(stats_text, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤
@dp.callback_query(lambda c: c.data == "create_qr")
async def create_qr_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞"""
    await callback.message.edit_text(
        "üîç **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ QR-–∫–æ–¥–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        parse_mode="Markdown"
    )
    await state.set_state(QRStates.waiting_for_product_name)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "my_qr_codes")
async def my_qr_codes_callback(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä QR-–∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with db_pool.acquire() as conn:
            qr_codes = await conn.fetch('''
                SELECT qr_code, product_name, product_category, points_earned, 
                       scan_count, created_at, is_active
                FROM qr_codes 
                WHERE created_by_user_id = $1 
                ORDER BY created_at DESC 
                LIMIT 10
            ''', callback.from_user.id)
            
            if not qr_codes:
                await callback.message.edit_text(
                    "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö QR-–∫–æ–¥–æ–≤.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–¥–∞.",
                    reply_markup=get_main_keyboard()
                )
                await callback.answer()
                return
            
            text = "üìä **–í–∞—à–∏ QR-–∫–æ–¥—ã** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n\n"
            
            for qr in qr_codes:
                status = "üü¢" if qr['is_active'] else "üî¥"
                category = PRODUCT_CATEGORIES.get(qr['product_category'], qr['product_category'])
                
                text += f"{status} **{qr['product_name']}**\n"
                text += f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                text += f"   –ë–∞–ª–ª—ã: {qr['points_earned']}\n"
                text += f"   –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {qr['scan_count']}\n"
                text += f"   –ö–æ–¥: `{qr['qr_code'][:8]}...`\n\n"
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search_qr"),
                InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
            )
            builder.row(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            
            await callback.message.edit_text(
                text, 
                parse_mode="Markdown",
                reply_markup=builder.as_markup()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è QR-–∫–æ–¥–æ–≤: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", 
            reply_markup=get_main_keyboard()
        )
    
    await callback.answer()

@dp.callback_query(lambda c: c.data == "statistics")
async def statistics_callback(callback: CallbackQuery):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        async with db_pool.acquire() as conn:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_stats = await conn.fetchrow('''
                SELECT 
                    COUNT(*) as total_qr,
                    SUM(scan_count) as total_scans,
                    SUM(points_earned * scan_count) as total_points,
                    COUNT(*) FILTER (WHERE is_active = TRUE) as active_qr
                FROM qr_codes 
                WHERE created_by_user_id = $1
            ''', callback.from_user.id)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_stats = await conn.fetch('''
                SELECT 
                    product_category,
                    COUNT(*) as count,
                    SUM(scan_count) as scans
                FROM qr_codes 
                WHERE created_by_user_id = $1
                GROUP BY product_category
                ORDER BY count DESC
                LIMIT 5
            ''', callback.from_user.id)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            week_stats = await conn.fetch('''
                SELECT 
                    date,
                    total_qr_generated,
                    total_scans
                FROM qr_statistics 
                WHERE created_by_user_id = $1 AND date >= CURRENT_DATE - INTERVAL '7 days'
                ORDER BY date DESC
            ''', callback.from_user.id)
            
            text = f"""
üìà **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

**–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ QR-–∫–æ–¥–æ–≤: {total_stats['total_qr'] or 0}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {total_stats['active_qr'] or 0}
‚Ä¢ –í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {total_stats['total_scans'] or 0}
‚Ä¢ –ë–∞–ª–ª–æ–≤ –≤—ã–¥–∞–Ω–æ: {total_stats['total_points'] or 0}

**–¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π:**
"""
            
            for cat in category_stats:
                cat_name = PRODUCT_CATEGORIES.get(cat['product_category'], cat['product_category'])
                text += f"‚Ä¢ {cat_name}: {cat['count']} QR ({cat['scans']} —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π)\n"
            
            if week_stats:
                text += "\n**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é:**\n"
                for day in week_stats:
                    text += f"‚Ä¢ {day['date'].strftime('%d.%m')}: {day['total_qr_generated']} QR, {day['total_scans']} —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n"
            
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            await callback.message.edit_text(
                text,
                parse_mode="Markdown",
                reply_markup=builder.as_markup()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=get_main_keyboard()
        )
    
    await callback.answer()

@dp.callback_query(lambda c: c.data == "search_qr")
async def search_qr_callback(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ QR-–∫–æ–¥–æ–≤"""
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ QR-–∫–æ–¥–æ–≤**\n\n"
        "–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.\n"
        "–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ QR-–∫–æ–¥—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ QR-–∫–æ–¥—ã'.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "help")
async def help_callback(callback: CallbackQuery):
    """–ü–æ–º–æ—â—å —á–µ—Ä–µ–∑ callback"""
    help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É NSP QR Generator**

**–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥:**
1. –ù–∞–∂–º–∏—Ç–µ "üîç –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥"
2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
4. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
5. –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
6. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ QR-–∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
‚Ä¢ –í–µ–¥–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞
/stats - –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    await callback.message.edit_text(
        help_text,
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.edit_text(
        f"üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("category_"))
async def category_selected_callback(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_key = callback.data.replace("category_", "")
    category_name = PRODUCT_CATEGORIES.get(category_key, category_key)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(category=category_key)
    
    await callback.message.edit_text(
        f"üìä **–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞**\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{category_name}**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_points_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("points_"))
async def points_selected_callback(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –±–∞–ª–ª–æ–≤"""
    if callback.data == "points_custom":
        await callback.message.edit_text(
            "‚úèÔ∏è **–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 500:",
            parse_mode="Markdown"
        )
        await state.set_state(QRStates.waiting_for_points)
        await callback.answer()
        return
    
    points = int(callback.data.replace("points_", ""))
    await state.update_data(points=points)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    category_name = PRODUCT_CATEGORIES.get(data['category'], data['category'])
    
    await callback.message.edit_text(
        f"üìù **–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞**\n\n"
        f"–¢–æ–≤–∞—Ä: **{data['product_name']}**\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{category_name}**\n"
        f"–ë–∞–ª–ª—ã: **{points}**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        parse_mode="Markdown"
    )
    await state.set_state(QRStates.waiting_for_description)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
@dp.message(QRStates.waiting_for_product_name)
async def process_product_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if len(message.text) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(product_name=message.text)
    
    await message.answer(
        f"üì¶ **–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞**\n\n"
        f"–¢–æ–≤–∞—Ä: **{message.text}**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        parse_mode="Markdown",
        reply_markup=get_categories_keyboard()
    )
    await state.set_state(QRStates.waiting_for_category)

@dp.message(QRStates.waiting_for_points)
async def process_custom_points(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤"""
    try:
        points = int(message.text)
        if points < 10 or points > 500:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 500. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(points=points)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        category_name = PRODUCT_CATEGORIES.get(data['category'], data['category'])
        
        await message.answer(
            f"üìù **–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞**\n\n"
            f"–¢–æ–≤–∞—Ä: **{data['product_name']}**\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{category_name}**\n"
            f"–ë–∞–ª–ª—ã: **{points}**\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
            parse_mode="Markdown"
        )
        await state.set_state(QRStates.waiting_for_description)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@dp.message(QRStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    if message.text == "/skip":
        description = None
    else:
        description = message.text
    
    await state.update_data(description=description)
    
    await message.answer(
        "üè≠ **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
    )
    await state.set_state(QRStates.waiting_for_manufacturer)

@dp.message(QRStates.waiting_for_manufacturer)
async def process_manufacturer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"""
    if message.text == "/skip":
        manufacturer = None
    else:
        manufacturer = message.text
    
    await state.update_data(manufacturer=manufacturer)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    category_name = PRODUCT_CATEGORIES.get(data['category'], data['category'])
    
    confirmation_text = f"""
‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞**

**–¢–æ–≤–∞—Ä:** {data['product_name']}
**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category_name}
**–ë–∞–ª–ª—ã –∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:** {data['points']}
**–û–ø–∏—Å–∞–Ω–∏–µ:** {data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
**–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:** {data.get('manufacturer', '–ù–µ —É–∫–∞–∑–∞–Ω')}

–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥?
    """
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_create_qr"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_qr")
    )
    
    await message.answer(
        confirmation_text,
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    await state.set_state(QRStates.confirm_creation)

@dp.callback_query(lambda c: c.data == "confirm_create_qr")
async def confirm_create_qr_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞"""
    await callback.message.edit_text("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        qr_code = await save_qr_to_database(
            data, 
            callback.from_user.id, 
            callback.from_user.username or callback.from_user.first_name
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        qr_img = generate_qr_code(qr_code)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
        await callback.message.delete()
        
        category_name = PRODUCT_CATEGORIES.get(data['category'], data['category'])
        caption = f"""
üéâ **QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**

**–¢–æ–≤–∞—Ä:** {data['product_name']}
**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category_name}
**–ë–∞–ª–ª—ã:** {data['points']}
**–ö–æ–¥:** `{qr_code}`

–≠—Ç–æ—Ç QR-–∫–æ–¥ –º–æ–∂–Ω–æ –Ω–∞–∫–ª–µ–∏—Ç—å –Ω–∞ —É–ø–∞–∫–æ–≤–∫—É —Ç–æ–≤–∞—Ä–∞. 
–ü—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç {data['points']} –±–∞–ª–ª–æ–≤.
        """
        
        await bot.send_photo(
            chat_id=callback.from_user.id,
            photo=types.BufferedInputFile(qr_img.getvalue(), filename=f"qr_{qr_code[:8]}.png"),
            caption=caption,
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )
        
        logger.info(f"QR-–∫–æ–¥ {qr_code} —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_keyboard()
        )
    
    await state.clear()
    await callback.answer("QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!")

@dp.callback_query(lambda c: c.data == "cancel_create_qr")
async def cancel_create_qr_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message()
async def unauthorized_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if message.from_user.id not in AUTHORIZED_USERS:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞–¥–æ–≤—â–∏–∫–æ–≤ NSP.\n"
            f"–í–∞—à ID: `{message.from_user.id}`\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="Markdown"
        )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        if db_pool:
            await db_pool.close()

if __name__ == "__main__":
    asyncio.run(main())
